pipeline {
    agent any
    environment {
        K8S_NAMESPACE = 'staging'
    }
    parameters {
        string(name: 'RELEASE_TAG', defaultValue: '', description: 'Release tag (e.g., v1.2.3) or leave empty to auto-detect')
    }
    stages {
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: 'https://github.com/phucvu0210/spring-petclinic-microservices.git'
                    def gitTag = params.RELEASE_TAG ?: sh(script: 'git describe --tags --exact-match 2>/dev/null || true', returnStdout: true).trim()
                    if (!gitTag) {
                        error "No release tag found. Please specify RELEASE_TAG or push a release tag (e.g., v1.2.3)."
                    }
                    env.RELEASE_TAG = gitTag
                    echo "Deploying release tag: ${env.RELEASE_TAG}"
                }
            }
        }
        stage('Prepare Helm Values') {
            steps {
                script {
                    // Đọc file values.yaml
                    def values = readYaml file: 'helm/petclinic/values.yaml'
                    
                    // Cập nhật releaseTag và pathPrefix
                    values.releaseTag = env.RELEASE_TAG
                    values.apiGateway.pathPrefix = "/${env.RELEASE_TAG}"
                    
                    // Cập nhật tag cho tất cả service
                    def serviceKeys = [
                        'adminServer',
                        'apiGateway',
                        'configServer',
                        'customersService',
                        'discoveryServer',
                        'genaiService',
                        'vetsService',
                        'visitsService'
                    ]

                    serviceKeys.each { serviceKey ->
                        values[serviceKey].tag = env.RELEASE_TAG
                        echo "Updated tag for ${serviceKey} to ${env.RELEASE_TAG}"
                    }

                    // Ghi lại file values.yaml
                    writeYaml file: 'helm/petclinic/values.yaml', data: values, overwrite: true

                    // Lưu pathPrefix vào biến môi trường để sử dụng ở stage sau
                    env.PATH_PREFIX = values.apiGateway.pathPrefix
                }
            }
        }
        stage('Deploy with Helm') {
            steps {
                script {
                    sh "helm upgrade --install petclinic helm/petclinic --namespace ${K8S_NAMESPACE} --create-namespace"
                }
            }
        }
        stage('Expose Service') {
            steps {
                script {
                    def nodeName = sh(script: "kubectl get nodes --no-headers | grep -v control-plane | awk '{print \$1}'", returnStdout: true).trim()
                    def nodeIp = sh(script: "kubectl get node ${nodeName} -o jsonpath='{.status.addresses[?(@.type==\"InternalIP\")].address}'", returnStdout: true).trim()
                    def servicePort = sh(script: "kubectl get svc api-gateway -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
                    echo "Access the application at: http://${nodeIp}:${servicePort}${env.PATH_PREFIX}"
                    echo "Or use: http://petclinic-staging.local:${servicePort}${env.PATH_PREFIX} (after adding '${nodeIp} petclinic-staging.local' to /etc/hosts)"
                }
            }
        }
    }
    post {
        always {
            echo "Cleaning up workspace..."
            cleanWs()
        }
        success {
            echo "Deployment to staging completed successfully!"
        }
        failure {
            echo "Deployment to staging failed. Check logs for details."
        }
    }
}