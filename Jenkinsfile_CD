pipeline {
    agent any
    environment {
        K8S_NAMESPACE = 'services'
    }
    parameters {
        string(name: 'admin-server', defaultValue: 'main', description: 'Branch for admin-server (e.g., dev_admin_server)')
        string(name: 'api-gateway', defaultValue: 'main', description: 'Branch for api-gateway (e.g., dev_api_gateway)')
        string(name: 'config-server', defaultValue: 'main', description: 'Branch for config-server (e.g., dev_config_server)')
        string(name: 'customers-service', defaultValue: 'main', description: 'Branch for customers-service (e.g., dev_customers_service)')
        string(name: 'discovery-server', defaultValue: 'main', description: 'Branch for discovery-server (e.g., dev_discovery_server)')
        string(name: 'genai-service', defaultValue: 'main', description: 'Branch for genai-service (e.g., dev_genai_service)')
        string(name: 'vets-service', defaultValue: 'main', description: 'Branch for vets-service (e.g., dev_vets_service)')
        string(name: 'visits-service', defaultValue: 'main', description: 'Branch for visits-service (e.g., dev_visits_service)')
    }
    stages {
        stage('Prepare Helm Values') {
            steps {
                script {
                    def values = readYaml file: 'helm/petclinic/values.yaml'
                    
                    def serviceBranchMapping = [
                        'adminServer': params.'admin-server',
                        'apiGateway': params.'api-gateway',
                        'configServer': params.'config-server',
                        'customersService': params.'customers-service',
                        'discoveryServer': params.'discovery-server',
                        'genaiService': params.'genai-service',
                        'vetsService': params.'vets-service',
                        'visitsService': params.'visits-service'
                    ]

                    serviceBranchMapping.each { serviceKey, branchName ->
                        if (branchName && branchName != 'main') {
                            def commitId = sh(script: "git ls-remote https://github.com/pmhanh/spring-petclinic-microservices.git ${branchName} | awk '{print \$1}' | cut -c1-7", returnStdout: true).trim()
                            if (!commitId) {
                                error "Could not find commit ID for branch ${branchName} of ${serviceKey}"
                            }
                            values[serviceKey].tag = "${commitId}" 
                            echo "Updated tag for ${serviceKey} to ${commitId}"
                        } else {
                            values[serviceKey].tag = 'latest'   
                            echo "Using latest tag for ${serviceKey} (branch: main)"
                        }
                    }

                    writeYaml file: 'helm/petclinic/values.yaml', data: values, overwrite: true
                }
           }
        }

        stage('Deploy with Helm') {
            steps {
                script {
                    sh "helm upgrade --install petclinic helm/petclinic --namespace ${K8S_NAMESPACE} --create-namespace"
                }
            }
        }
        stage('Expose Service') {
            steps {
                script {
                    def nodeName = sh(script: "kubectl get nodes --no-headers | grep -v control-plane | awk '{print \$1}'", returnStdout: true).trim()
                    def nodeIp = sh(script: "kubectl get node ${nodeName} -o jsonpath='{.status.addresses[?(@.type==\"InternalIP\")].address}'", returnStdout: true).trim()
                    def servicePort = sh(script: "kubectl get svc api-gateway -n ${K8S_NAMESPACE} -o jsonpath='{.spec.ports[0].nodePort}'", returnStdout: true).trim()
                    echo "Access the application at: http://${nodeIp}:${servicePort}"
                    echo "Or use: http://petclinic.local:${servicePort} (after adding '${nodeIp} petclinic.local' to /etc/hosts)"
                }
            }
        }
    }
    post {
        always {
            echo "Cleaning up workspace..."
            cleanWs()
        }
        success {
            echo "Deployment completed successfully!"
        }
        failure {
            echo "Deployment failed. Check logs for details."
        }
    }
}